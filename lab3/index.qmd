---
title: "Laboratorio 3"
subtitle: "Curso: Fundamentos de programación con R"
author: "Irwing S. Saldaña"
format:
  html:
    dpi: 600
    smooth-scroll: true
    search: false
    code-summary: "ooo"
    code-fold: false
    code-overflow: wrap
    code-block-bg: true
    code-block-border-left: "#5000ef"
    linkcolor: "#5000ef"
    highlight-style: ayu
    code-link: true
    code-copy: true
    language: esp
    toc-location: left
    toc-depth: 3
    toc-title: "Contenidos"
    number-sections: false
editor: visual
editor_options: 
  chunk_output_type: console
---

# **1. Aplicar con código los pseudocódigos del laboratorio 1**

## **1.1. Identificar un número par**

En el laboratorio 1 realizaste el pseudocódigo para identificar si un número es par o impar. Utilízalo para crear la función `espar()` que automatice dicha identificación.

```{r}
# PSEUDOCÓDIGO

# Código en modo 2 (avanzado): ------------------- -
# Iniciar
# Recibir: N
# if N %% 2 == 0
# | print("es par")
# | else 
# | | print("es impar")
# Fin

# Función espar()
espar <- function(N) {
  if (N %% 2 == 0){
    return("es par")
  } else if(N %% 2 != 0) {
    return("no es par")
  }
}

# Evaluar la función espar()
espar(5)
espar(10)
```

## **1.2. Contabilizar las Guaninas en una secuencia de ADN**

En el laboratorio 1 realizaste el pseudocódigo del procedimiento de contabilizar las guaninas de una secuencia de ADN. 

Primero, creemos una secuencia de ADN cualquiera en R llamada `Cadena_ADN`:

```{r}
# Crea los posibles valores
vals <- c("A","G","C","T")

# Aplica un muestreo con repeticiones para crear la cadena de ADN
set.seed(123)
Cadena_ADN <- sample(vals, 600, replace = TRUE, prob = c(0.3,0.3,0.2,0.2))
```

Ahora, crea la función `guaninas()` que consiga recrear tu pseudocódigo, tomando como argumento de entrada el objeto `Cadena_ADN`.

```{r}
# PSEUDOCÓDIGO

# Código en modo 2 (avanzado): ------------------- -
# Iniciar
# Recibir: Cadena_ADN
# Probar el siguiente if elemento a elemento
#  |  if (elemento == "G") 
#  |   |  CONTEO = CONTEO + 1
#  |   else 
#  |   | CONTEO = CONTEO
# Imprimir valor: "CONTEO"
# Finalizar

# Función guaninas()
guaninas <- function(Cadena_ADN) {
  
  CONTEO <- 0
  
  for (i in seq_along(Cadena_ADN)) {
  if (Cadena_ADN[i] == "G") {
    CONTEO <- CONTEO + 1
  } else { 
    CONTEO <- CONTEO
    }
  }
  return(CONTEO)
  
}

# Evaluar la función guaninas()
guaninas(Cadena_ADN)
```

En R existen varias funciones que pueden servirnos a resolver problemas para las cuales no fueron originalmente creadas. Veamos el caso de la librería stringr que contiene funciones interesantes para el manejo de vectores del tipo `character`.

```{r}
# Función existente de stringr que logra este resultado
Cadena_ADN_logica <- stringr::str_detect(Cadena_ADN, pattern = "G")

sum(Cadena_ADN_logica) 
```

Creemos una variante de la función `guaninas()` que le permita al usuario especificar la base nitrogenada que desea cuantificar en la secuencia de ADN. Esta nueva función la llamaremos `conteoBN()`. 

```{r}
# Función conteoBN() donde el usuario define qué base nitrogenada contar
conteoBN <- function(Cadena_ADN, BN) {
  
  CONTEO <- 0
  
  for (i in seq_along(Cadena_ADN)) {
  if (Cadena_ADN[i] == BN) {
    CONTEO <- CONTEO + 1
  } else { 
    CONTEO <- CONTEO
    }
  }
  return(CONTEO)
  
}

# Evaluar la función conteoBN()
conteoBN(Cadena_ADN, "G")
conteoBN(Cadena_ADN, "A")
conteoBN(Cadena_ADN, "C")
conteoBN(Cadena_ADN, "T")
```

## **1.3. Cálculo de la Tasa Metabólica Basal de una persona**

La tasa metabólica basal (TMB) es la cantidad mínima de energía que necesita tu cuerpo para sobrevivir realizando las funciones básicas, tales como respirar, parpadear, filtrar la sangre, regular la temperatura del cuerpo o sintetizar hormonas.

Para su cálculo se emplea la tasa metabólica (TM):

- *Para hombres:*

$$
\text{TM} = 10*\text{peso} + 6.26*\text{altura}-5*\text{edad}+5
$$
- *Para hombres:*

$$
\text{TM} = 10*\text{peso} + 6.26*\text{altura}-5*\text{edad}-161
$$

Y luego se multiplica dicho valor por una constante definida según el nivel de actividades que realiza una persona durante la semana:

- $\text{TMB} = \text{TM} * 1.2$ para personas totalmente sedentarias (0 días de ejercicio semanal).

- $\text{TMB} = \text{TM} * 1.375$ para personas ligeramente activas (1-3 días de ejercicio/semana).

- $\text{TMB} = \text{TM} * 1.55$ para personas moderadamente activas (4-5 días de ejercicio/semana).

- $\text{TMB} = \text{TM} * 1.725$ para personas muy activas (6-7 días de ejercicio/semana).

- $\text{TMB} = \text{TM} * 1.912$ para personas extremadamente activas (6-7 días de ejercicio/semana pero bajo régimen de entrenamiento doble).

Por ejemplo, para un hombre que pesa 82 kg, mide 190 cm, y tiene 29 años de edad; su TMB (condicionada al nivel de actividad semanal), sería:

```{r}
# Crea las variables
peso <- 82
altura <- 190
edad <- 29

# Calcula el TM
TM <- 10 * peso + 6.26 * altura - 5 * edad + 5

# Calcula el TMB condicionada al nivel de actividad semanal
TM * 1.2 # totalmente sedentario
TM * 1.375 # ligeramente activo
TM * 1.55 # moderadamente activo
TM * 1.725 # muy activo
TM * 1.912 # extremadamente activo
```

Con el pseudocódigo finalizado, crea la función `TMB()`:

```{r}
TMB <- function(peso, altura, edad, sexo, dias_entrenamiento, doble_ejercicio = FALSE){
  
  TM = 10*peso + 6.26*altura - 5*edad
  
  if (sexo == "hombre") {
    TM = TM + 5
  } else if (sexo == "mujer") {
    TM = TM - 161
  } else {
    return(errorCondition("Sexo solo puede ser \"hombre\" o \"mujer\""))
  }
  
  if (doble_ejercicio == TRUE & dias_entrenamiento %in% 6:7) {
      return(TM*1.912)
    
  } else if (doble_ejercicio == FALSE) {
    DE <- dias_entrenamiento
    
    multi <- dplyr::case_when(
      DE == 0 ~ 1.2,
      DE %in% 1:3 ~ 1.375,
      DE  %in% 4:5 ~ 1.55,
      DE  %in% 6:7 ~ 1.725
      )
    
    return(TM*multi) 
  
  } else {
    return(errorCondition("Comprueba las variables de entrada", call. = FALSE))
  }
}

TMB(peso = 83, altura = 190, edad = 29, sexo = "hombre", 
    dias_entrenamiento = 4, doble_ejercicio = FALSE)
# número de calorías que necesitas diarias para mantener tu peso

```

Mejora la impresión del resultado en consola utilizando `cat()` y textos adicionales al valor de TMB. Define esta función como `TMB2()`.

```{r}
TMB2 <- function(peso, altura, edad, sexo, dias_entrenamiento, doble_ejercicio = FALSE){
  
  TM = 10*peso + 6.26*altura-5*edad
  
  if (sexo == "hombre") {
    TM = TM + 5
  } else if (sexo == "mujer") {
    TM = TM - 161
  } else {
    return(errorCondition("Sexo solo puede ser \"hombre\" o \"mujer\""))
  }
  
  mensaje <- "Tu tasa metabólica basal es: "
  
  if (doble_ejercicio == TRUE & dias_entrenamiento %in% 6:7) {
      return(cat(mensaje, TM*1.912, "kcal/día", "\n"))
    
  } else if (doble_ejercicio == FALSE) {
    DE <- dias_entrenamiento
    
    multi <- dplyr::case_when(
      DE == 0 ~ 1.2,
      DE %in% 1:3 ~ 1.375,
      DE  %in% 4:5 ~ 1.55,
      DE  %in% 6:7 ~ 1.725
      )
    
   return(cat(mensaje, TM*multi,"kcal/día", "\n"))
  
  } else {
    return(warning("Comprueba las variables de entrada", call. = FALSE))
  }
}

# número de calorías que necesitas diarias para mantener tu peso
TMB2(peso = 63, altura = 155, edad = 23, sexo = "hombre",
    dias_entrenamiento = 5, doble_ejercicio = FALSE)
```

Las fórmulas se consideraron tal cual se muestran [en este link](https://www.gob.pe/14903-calcular-tasa-de-metabolismo-basal-tmb-en-adultos)
