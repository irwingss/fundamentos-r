---
title: "Laboratorio 2"
subtitle: "Curso: Fundamentos de programación con R"
author: "Irwing S. Saldaña"
format:
  html:
    dpi: 600
    smooth-scroll: true
    search: false
    code-summary: "ooo"
    code-fold: false
    code-overflow: wrap
    code-block-bg: true
    code-block-border-left: "#5000ef"
    linkcolor: "#5000ef"
    highlight-style: ayu
    code-link: true
    code-copy: true
    language: esp
    toc-location: left
    toc-depth: 3
    toc-title: "Contenidos"
    number-sections: true
editor: visual
editor_options: 
  chunk_output_type: console
---

# **Carga de datos desde excel a RStudio**

Esta sección te ayudará a reforzar el manejo de las estructuras y las clases de variables que existen en R para almacenar la información. Primero, aprenderás a cargar bases de datos externas a RStudio. Puedes hacerlo desde diversos tipos de archivos, pero comenzaremos con lo más básico: un archivo Excel.

```{r}
# Instala la librería y actívala
# install.packages("openxlsx")


# Carga el excel



# Definiendo el reemplazo de los espacios en blanco de los nombres de columnas



# Revisa la base con las funciones aprendidas



```

Ahora a partir de un archivo delimitado por comas (CSV).

```{r}
# Abrir el archivo cane.csv


# Revisa la base con las funciones aprendidas


```

Finalmente, activemos una base de datos que ya está pre-instalada en R. Estas siempre se encuentran dentro de algún paquete específico

```{r}
# install.packages("datarium")


# Revisa la base con las funciones aprendidas


```


# **50 funciones comunes en R**

```{r, eval=FALSE, echo=TRUE}
%>%              # Pipe
|>               # Pipe nativo
mean()           # Promedio
median()         # Mediana
sd()             # Desviación estándar
var()            # Varianza
quantile()       # Cálculo de cuantiles
range()          # Rango de valores
seq_along()      # Secuencia numérica entre el máximo y mínimo
sum()            # Sumatoria
cumsum()         # Suma acumulada
prod()           # Productorio
cumprod()        # Producto acumulado
max()            # Valor máximo
min()            # Valor mínimo

seq()            # Crear secuencia
rep()            # Crear vector de repeticiones
paste0()         # Concatenar strings (textos) sin dejar espacio
paste()          # Concatenar strings (textos)
sort()           # Reordenar de menor a mayor, o viceversa
rev()            # Revertir el orden
unique()         # Valores únicos en un vector
scale()          # Transformación: Estandarización
lm()             # Crear modelo lineal
glm()            # Crear modelo generalizado lineal
aov()            # Crear anova
summary()        # Ver resumen estadístico de un objeto de modelamiento
chisq.test()     # Crear prueba de chi cuadrado
t.test()         # Crear prueba de t
cor.test()       # Calcular la correlación entre dos vectores

plot()           # Plot básico
hist()           # Histograma de un vector
boxplot()        # Boxplot o gráfico de cajas
plot(density())  # Gráfico de densidad
getwd()          # Obtener el directorio de trabajo actual
setwd()          # Definir un directorio de trabajo
str()            # Ver la estructura de un objeto
View()           # Observar una tabla o lista como una pestaña
names()          # Ver los nombres de un objeto (nombres de columna)
length()         # Obtener la cantidad de elementos de un vector
ncol()           # Obtener el número de columnas
nrow()           # Obtener el número de filas
head()           # Visualizar las primeras 6 filas de una tabla
tail()           # Visualizar las últimas 6 filas de una tabla

rm()             # Remover un objeto
ls()             # Lista de objetos en el ambiente
rm(ls())         # Eliminar todos los objetos del ambiente
dev.off()        # Reiniciar la salida gráfica
install.packages() # Instalar una librería
remove.packages()  # Eliminar una librería
library()        # Activar una librería
require()        # Activar una librería
table()          # Crear una matriz de contingencia
data()           # Cargar bases de dato de ejemplo en R
round()          # Redondear dígitos
print()          # Imprimir un objeto
```

# **Estructuras de datos y clases**

Es hora de poner en práctica lo aprendido sobre la estructura (vectores, factores, data.frame y listas), así como las clases (numeric, integer, character, logical) de variable. Utilizaremos algunas de las 50 funciones básicas en R que se les presentó anteriormente (ver en el chunk anterior). 

**Por si se necesite, aquí les dejo unos emojis:** 

😎😮😉   🚑✈️🔴   ⚽🍔🍻  🌾  🐬🦀🐤🐞   💩

## **Indexación y uso de bases de data.frames**

```{r}
# Indexar columnas para un gráfico básico, re-básico, mega-simple, con la querida y odiada función plot().

# Usa la base de datos cane para crear un gráfico de dispersión de puntos con las columnas n y r.




# Ahora veamos la correlación de Pearson entre estas columnas
# Primero abre el Viewer de la base cane



# ¿Cuáles serían las 3 maneras de indexar las columnas n y r?



# Crea un gráfico de función de densidad sencillo de las columnas n y r



# Crea un boxplot con la columna block



mis_colores <- c("royalblue","darkorange", "firebrick", "forestgreen")



# Crea un histograma de frecuencias con las columnas n y r



```

## **Indexación y uso de bases de factores**

```{r}
# Revisemos la columna block de la base cane



# Convertir dicha columna a factor



# Crear una nueva data.frame con las columnas n, r y block
new_cane <- ...

new_cane2 <- ...

# Revisa las primeras 6 filas



```


## Trabajo con vectores y factores: uso e importancia

```{r}
# Resúmenes estadísticos rápidos



# Gráficos de pares 
# (tu primera impresión de ggplot2)
# install.packages("GGally")



# Cálculos estadísticos
# ¿Y el coeficiente de variación?




# Aplicando el cálculo estadístico por grupo



# ¿Y si nos ahorramos la indexación?: uso de with()

promedio <- ...

desvest <- ...

varianza <- ...

minimo <- ...

maximo <- ...

categorias <- ...

# Unir todos los vectores creados en una sola data.frame como resumen estadístico



# Exportar el resumen estadístico (data.frame)



```

## **Listas y más listas**

```{r}
# Convertir una data.frame a lista

res_est_Lista <- ...

# Indexando una lista nombrada



# Creando una lista sin nombres desde cero



# Creando una lista nombrada desde cero




# Indexa estos retos:
# Ubica el valor de la varianza de la categoría C ubicada
# en el elemento "res_est", tanto en la lista nombrada y no nombrada




# Des-enlistar una lista, un proceso importante
# Ejecuta este ejemplo de automatización de 
# creación y comparación de modelos

data("iris") # data

lista_modelos <- lst() # lista vacía

for (i in 1:4) {
  lista_modelos[[i]] <- lm(iris[,i] ~ Species, data = iris)
} # loop for

lista_modelos # visualizar lista de modelos. Importante!!

lista_AIC <- lapply(lista_modelos, AIC) # aplicar el cálculo de AIC

names(lista_AIC) <- names(iris)[-5] # darle nombre a cada AIC

lista_AIC # revisar la lista de AIC de los modelos resultante de lapply() 

# des-enlistar



```

# **¿Más práctica?**

Ya comprendes:

- Cómo se crean las diferentes *estructuras de datos* más importantes (vectores, factores, listas y data.frame).

- Cómo reconocer las diferentes *clases de datos* (numeric, integer, character, logical) y sus aplicaciones. 

- Cómo funciona la *indexación* con `$`, `[]`, `[[]]`.

- Cómo *importar y exporta bases* de datos desde/hacia tu equipo.

- El uso de algunas *funciones básicas* de R.

- La *visualización básica* de datos en R, y la existencia de *ggplot2*. 

- ¡La existencia de el *loop for*!


Emplea las demás bases de datos para comenzar a aplicar indexación con la finalidad de crear gráficos y aplicar funciones estadísticas que aquí hemos revisado.

Y como siempre, puedes seguír capacitándote con la versión beta de mi libro ["Introducción a R para Ciencias." ](https://irwingss.github.io/intro_r_ciencias/)


