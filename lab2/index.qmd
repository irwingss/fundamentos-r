---
title: "Laboratorio 2"
subtitle: "Curso: Fundamentos de programaci√≥n con R"
author: "Irwing S. Salda√±a"
format:
  html:
    dpi: 600
    smooth-scroll: true
    search: false
    code-summary: "ooo"
    code-fold: false
    code-overflow: wrap
    code-block-bg: true
    code-block-border-left: "#5000ef"
    linkcolor: "#5000ef"
    highlight-style: ayu
    code-link: true
    code-copy: true
    language: esp
    toc-location: left
    toc-depth: 3
    toc-title: "Contenidos"
    number-sections: true
editor: visual
editor_options: 
  chunk_output_type: console
---

# **Carga de datos desde excel a RStudio**

Esta secci√≥n te ayudar√° a reforzar el manejo de las estructuras y las clases de variables que existen en R para almacenar la informaci√≥n. Primero, aprender√°s a cargar bases de datos externas a RStudio. Puedes hacerlo desde diversos tipos de archivos, pero comenzaremos con lo m√°s b√°sico: un archivo Excel.

```{r}
# Instala la librer√≠a y act√≠vala
# install.packages("openxlsx")
library(openxlsx)

# Carga el excel
biopsias <- read.xlsx("bases/biopsy.xlsx")
str(biopsias)

# Definiendo el reemplazo de los espacios en blanco de los nombres de columnas
biopsias <- read.xlsx("bases/biopsy.xlsx", sep.names = "_")
str(biopsias)

# Revisa la base con las funciones aprendidas
str(biopsias)
View(biopsias)
dim(biopsias)
ncol(biopsias)
nrow(biopsias)
names(biopsias)
colnames(biopsias)
rownames(biopsias)
```

Ahora a partir de un archivo delimitado por comas (CSV).

```{r}
# Abrir el archivo cane.csv
cane <- read.csv("bases/cane.csv")
cane <- read.csv("bases/cane.csv", row.names = 1) # Solo cuando sea necesario

# Revisa la base con las funciones aprendidas
str(cane)
View(cane)
```

Finalmente, activemos una base de datos que ya est√° pre-instalada en R. Estas siempre se encuentran dentro de alg√∫n paquete espec√≠fico

```{r}
# install.packages("datarium")
library(datarium)
data("weightloss")

# Revisa la base con las funciones aprendidas
str(weightloss)
View(cane)
```


# **50 funciones comunes en R**

```{r, eval=FALSE, echo=TRUE}
%>%              # Pipe
|>               # Pipe nativo
mean()           # Promedio
median()         # Mediana
sd()             # Desviaci√≥n est√°ndar
var()            # Varianza
quantile()       # C√°lculo de cuantiles
range()          # Rango de valores
seq_along()      # Secuencia num√©rica entre el m√°ximo y m√≠nimo
sum()            # Sumatoria
cumsum()         # Suma acumulada
prod()           # Productorio
cumprod()        # Producto acumulado
max()            # Valor m√°ximo
min()            # Valor m√≠nimo

seq()            # Crear secuencia
rep()            # Crear vector de repeticiones
paste0()         # Concatenar strings (textos) sin dejar espacio
paste()          # Concatenar strings (textos)
sort()           # Reordenar de menor a mayor, o viceversa
rev()            # Revertir el orden
unique()         # Valores √∫nicos en un vector
scale()          # Transformaci√≥n: Estandarizaci√≥n
lm()             # Crear modelo lineal
glm()            # Crear modelo generalizado lineal
aov()            # Crear anova
summary()        # Ver resumen estad√≠stico de un objeto de modelamiento
chisq.test()     # Crear prueba de chi cuadrado
t.test()         # Crear prueba de t
cor.test()       # Calcular la correlaci√≥n entre dos vectores

plot()           # Plot b√°sico
hist()           # Histograma de un vector
boxplot()        # Boxplot o gr√°fico de cajas
plot(density())  # Gr√°fico de densidad
getwd()          # Obtener el directorio de trabajo actual
setwd()          # Definir un directorio de trabajo
str()            # Ver la estructura de un objeto
View()           # Observar una tabla o lista como una pesta√±a
names()          # Ver los nombres de un objeto (nombres de columna)
length()         # Obtener la cantidad de elementos de un vector
ncol()           # Obtener el n√∫mero de columnas
nrow()           # Obtener el n√∫mero de filas
head()           # Visualizar las primeras 6 filas de una tabla
tail()           # Visualizar las √∫ltimas 6 filas de una tabla

rm()             # Remover un objeto
ls()             # Lista de objetos en el ambiente
rm(ls())         # Eliminar todos los objetos del ambiente
dev.off()        # Reiniciar la salida gr√°fica
install.packages() # Instalar una librer√≠a
remove.packages()  # Eliminar una librer√≠a
library()        # Activar una librer√≠a
require()        # Activar una librer√≠a
table()          # Crear una matriz de contingencia
data()           # Cargar bases de dato de ejemplo en R
round()          # Redondear d√≠gitos
print()          # Imprimir un objeto
```

# **Estructuras de datos y clases**

Es hora de poner en pr√°ctica lo aprendido sobre la estructura (vectores, factores, data.frame y listas), as√≠ como las clases (numeric, integer, character, logical) de variable. Utilizaremos algunas de las 50 funciones b√°sicas en R que se les present√≥ anteriormente (ver en el chunk anterior). 

**Por si se necesite, aqu√≠ les dejo unos emojis:** 

üòéüòÆüòâ   üöë‚úàÔ∏èüî¥   ‚öΩüçîüçª  üåæ  üê¨ü¶Äüê§üêû   üí©

## **Indexaci√≥n y uso de bases de data.frames**

```{r}
# Indexar columnas para un gr√°fico b√°sico, re-b√°sico, mega-simple, con la querida y odiada funci√≥n plot().

# Usa la base de datos cane para crear un gr√°fico de dispersi√≥n de puntos con las columnas n y r.

str(cane)

plot(cane$n, cane$r, 
     main = "Incidencia de enfermedad X en\nplantaciones de ca√±a de az√∫car", # title
     xlab = "N¬∞ brotes enfermos",
     ylab = "N¬∞ brotes totales", 
     cex = 2, # size
     col = scales::alpha("deepskyblue2", 0.8), # color
     pch = "üí©") # shape, n√∫meros del 1 al 25, cualquier "car√°cter", incluso "emojis"

# Ahora veamos la correlaci√≥n de Pearson entre estas columnas
# Primero abre el Viewer de la base cane

View(cane)

# ¬øCu√°les ser√≠an las 3 maneras de indexar las columnas n y r?
cor.test(cane[,"n"], cane[,"r"])

cor.test(cane[,1], cane[,2])

cor.test(cane$n, cane$r)

# Crea un gr√°fico de funci√≥n de densidad sencillo de las columnas n y r

plot(density(cane$r))

plot(density(cane$n))

# Crea un boxplot con la columna block

boxplot(cane$r) # indexaci√≥n

boxplot(r ~ block, data = cane) # f√≥rmula de enfrentamiento

boxplot(r ~ block, data = cane, 
        horizontal = TRUE,
        col = "coral")

mis_colores <- c("royalblue","darkorange", "firebrick", "forestgreen")

boxplot(r ~ block, 
        data = cane, 
        horizontal = TRUE,
        col =  scales::alpha(mis_colores,0.7), 
        pch = "üê§")

# Crea un histograma de frecuencias con las columnas n y r

hist(cane$n) 

hist(cane$r) 

hist(cane$n, col = scales::alpha("darkgreen", 0.5), ann = FALSE) 

```

## **Indexaci√≥n y uso de bases de factores**

```{r}
# Revisemos la columna block de la base cane

str(cane)

# Convertir dicha columna a factor

cane$block <- factor(cane$block) # creaci√≥n de factor
cane$block <- as.factor(cane$block) # coerci√≥n a factor

# Crear una nueva data.frame con las columnas n, r y block
new_cane <- data.frame(cane$n, cane$r, cane$block)

new_cane2 <- data.frame(brotes = cane$n, 
                       enfermos = cane$r, 
                       bloque = cane$block)

# Revisa las primeras 6 filas

head(new_cane)

head(new_cane2)
```


## Trabajo con vectores y factores: uso e importancia

```{r}
# Res√∫menes estad√≠sticos r√°pidos
summary(new_cane2)

summary(new_cane2$enfermos)


# Gr√°ficos de pares 
# (tu primera impresi√≥n de ggplot2)
# install.packages("GGally")

library(GGally)

ggpairs(new_cane2)

ggpairs(data = new_cane2, 
        mapping = aes(color = bloque)) +  # importancia de bloque como factor
  theme_test()

# C√°lculos estad√≠sticos
# ¬øY el coeficiente de variaci√≥n?

mean(new_cane2$brotes)

sd(new_cane2$brotes)

var(new_cane2$brotes)

min(new_cane2$brotes)

max(new_cane2$brotes)


# Aplicando el c√°lculo estad√≠stico por grupo

tapply(new_cane2$brotes, new_cane2$bloque, mean) # cualquie funci√≥n estad√≠stica

tapply(new_cane2$brotes, new_cane2$bloque, var)

# ¬øY si nos ahorramos la indexaci√≥n?: uso de with()

promedio <- with(new_cane2, 
     tapply(brotes, bloque, mean))

desvest <- with(new_cane2, 
     tapply(brotes, bloque, sd))

varianza <- with(new_cane2, 
     tapply(brotes, bloque, var))

minimo <- with(new_cane2, 
     tapply(brotes, bloque, min))

maximo <- with(new_cane2, 
     tapply(brotes, bloque, max))

categorias <- levels(new_cane2$bloque)

# Unir todos los vectores creados en una sola data.frame como resumen estad√≠stico

data.frame(categorias, promedio, desvest, varianza, minimo, maximo)

res_est <- data.frame(categorias, promedio, desvest, varianza, minimo, maximo)

# Exportar el resumen estad√≠stico (data.frame)

library(openxlsx)

write.xlsx(res_est, "res_est.xlsx")

```

## **Listas y m√°s listas**

```{r}
# Convertir una data.frame a lista

res_est

as.list(res_est)

res_est_Lista <- as.list(res_est)

# Indexando una lista nombrada
res_est_Lista$categorias

# Creando una lista sin nombres desde cero

lista_total <- list(res_est, # data.frame
                    promedio, # vector
                    res_est_Lista) # lista

lista_total

# Creando una lista nombrada desde cero

library(dplyr)

lista_total2 <- lst(res_est, # data.frame
                    promedio, # vector
                    res_est_Lista) # lista

lista_total2

# Indexa estos retos:
# Ubica el valor de la varianza de la categor√≠a C ubicada
# en el elemento "res_est", tanto en la lista nombrada y no nombrada

lista_total[[1]][3,4]

lista_total2$res_est[3,4]

lista_total2$res_est$varianza[3]

# Des-enlistar una lista, un proceso importante
# Ejecuta este ejemplo de automatizaci√≥n de 
# creaci√≥n y comparaci√≥n de modelos

data("iris") # data

lista_modelos <- lst() # lista vac√≠a

for (i in 1:4) {
  lista_modelos[[i]] <- lm(iris[,i] ~ Species, data = iris)
} # loop for

lista_modelos # visualizar lista de modelos. Importante!!

lista_AIC <- lapply(lista_modelos, AIC) # aplicar el c√°lculo de AIC

names(lista_AIC) <- names(iris)[-5] # darle nombre a cada AIC

lista_AIC # revisar la lista de AIC de los modelos resultante de lapply() 

# des-enlistar

unlist(lista_AIC)

```

# **¬øM√°s pr√°ctica?**

Ya comprendes:

- C√≥mo se crean las diferentes *estructuras de datos* m√°s importantes (vectores, factores, listas y data.frame).

- C√≥mo reconocer las diferentes *clases de datos* (numeric, integer, character, logical) y sus aplicaciones. 

- C√≥mo funciona la *indexaci√≥n* con `$`, `[]`, `[[]]`.

- C√≥mo *importar y exporta bases* de datos desde/hacia tu equipo.

- El uso de algunas *funciones b√°sicas* de R.

- La *visualizaci√≥n b√°sica* de datos en R, y la existencia de *ggplot2*. 

- ¬°La existencia de el *loop for*!


Emplea las dem√°s bases de datos para comenzar a aplicar indexaci√≥n con la finalidad de crear gr√°ficos y aplicar funciones estad√≠sticas que aqu√≠ hemos revisado.

Y como siempre, puedes segu√≠r capacit√°ndote con la versi√≥n beta de mi libro ["Introducci√≥n a R para Ciencias." ](https://irwingss.github.io/intro_r_ciencias/)


